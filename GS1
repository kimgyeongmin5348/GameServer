#include <windows.h> 
#include <tchar.h>
#include <atlimage.h>
#include <time.h>

#define WindowWidth 800
#define WindowHeight 800

typedef struct BACKGROUND {
    CImage img[3];
} Background;

typedef struct CHARACTER {
    CImage Standlmg[10];
} Character;

HINSTANCE g_hInst;
LPCTSTR lpszClass = L"Window Class Name";
LPCTSTR lpszWindowName = L"Server Project";

Background background;
Character Player[10];

void AllDraw(HDC memdc);
void AnimationDraw(HDC memdc);
void ImgLoad();

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);
void CALLBACK AniType(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)
{
    srand(time(NULL));
    HWND hWnd;
    MSG Message;
    WNDCLASSEX WndClass;
    g_hInst = hInstance;
    WndClass.cbSize = sizeof(WndClass);
    WndClass.style = CS_HREDRAW | CS_VREDRAW;
    WndClass.lpfnWndProc = (WNDPROC)WndProc;
    WndClass.cbClsExtra = 0;
    WndClass.cbWndExtra = 0;
    WndClass.hInstance = hInstance;
    WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
    WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
    WndClass.lpszMenuName = NULL;
    WndClass.lpszClassName = lpszClass;
    WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
    RegisterClassEx(&WndClass);
    hWnd = CreateWindow(lpszClass, lpszWindowName, WS_OVERLAPPEDWINDOW, 0, -10, 1616, 1000, NULL, (HMENU)NULL, hInstance, NULL);
    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    while (GetMessage(&Message, 0, 0, 0)) {
        TranslateMessage(&Message);
        DispatchMessage(&Message);
    }
    return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    PAINTSTRUCT ps;
    HDC hdc, memdc;

    switch (uMsg) {
    case WM_CREATE:
        hdc = GetDC(hWnd);
        ImgLoad();
        SetTimer(hWnd, 1, 100, (TIMERPROC)AniType);//캐릭터 타이머
        ReleaseDC(hWnd, hdc);
        break;
    case WM_PAINT:
        hdc = BeginPaint(hWnd, &ps);
        memdc = CreateCompatibleDC(hdc);
        AllDraw(memdc);
        BitBlt(hdc, 0, 0, WindowWidth, WindowHeight, memdc, 0, 0, SRCCOPY);
        DeleteDC(memdc);
        EndPaint(hWnd, &ps);
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    case WM_KEYDOWN:
        switch (wParam) {
        case 'w':
            break;
        case 'a':
            break;
        case 's':
            break;
        case 'd':
            break;
        }
    default:
        return DefWindowProc(hWnd, uMsg, wParam, lParam);
    }
    return 0;
}

void CALLBACK AniType(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime)
{
    HDC hdc, memdc;
    static HBITMAP hBitmap;
    hdc = GetDC(hWnd);
    hBitmap = CreateCompatibleBitmap(hdc, WindowWidth, WindowHeight);
    memdc = CreateCompatibleDC(hdc);
    SelectObject(memdc, hBitmap);
    AllDraw(memdc);
    BitBlt(hdc, 0, 0, WindowWidth, WindowHeight, memdc, 0, 0, SRCCOPY);
    DeleteObject(hBitmap);
    DeleteDC(memdc);
    ReleaseDC(hWnd, hdc);
}

void ImgLoad()
{
    background.img[0].Load(TEXT("chess_board.png"));
    Player[0].Standlmg[0].Load(TEXT("player.png"));
}

void AllDraw(HDC memdc)
{
    AnimationDraw(memdc);
}

void AnimationDraw(HDC hdc)
{
    background.img[0].Draw(hdc, 0, 0, WindowWidth, WindowHeight, 0, 0, 1600, 1000);
}
