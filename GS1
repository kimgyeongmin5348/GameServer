#include <windows.h> 
#include <tchar.h>
#include <atlimage.h>
#include <time.h>

#define WindowWidth 750
#define WindowHeight 750

typedef struct BACKGROUND {
    CImage img[3];
} Background;

typedef struct CHARACTER {
    CImage Standlmg[10];
} Character;

HINSTANCE g_hInst;
LPCTSTR lpszClass = L"Window Class Name";
LPCTSTR lpszWindowName = L"Server Project";

Background background;
//Character Player[10];

void AllDraw(HDC memdc);
void AnimationDraw(HDC memdc);
void ImgLoad();

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);
void CALLBACK AniType(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    // 윈도우 클래스 등록
    const wchar_t CLASS_NAME[] = L"SampleWindowClass";
    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    // 윈도우 생성
    HWND hWnd = CreateWindowEx(
        0,                              // 추가 스타일
        CLASS_NAME,                     // 윈도우 클래스 이름
        L"Win32 기본 창",               // 윈도우 제목
        WS_OVERLAPPEDWINDOW,            // 윈도우 스타일
        CW_USEDEFAULT, CW_USEDEFAULT,   // 윈도우 위치 (기본값)
        CW_USEDEFAULT, CW_USEDEFAULT,   // 윈도우 크기 (기본값)
        NULL,                           // 부모 윈도우 없음
        NULL,                           // 메뉴 없음
        hInstance,                      // 인스턴스 핸들
        NULL                            // 추가 인수 없음
    );

    if (hWnd == NULL) {
        MessageBox(NULL, L"윈도우를 생성할 수 없습니다.", L"오류", MB_OK | MB_ICONERROR);
        return 0;
    }

    // 윈도우 표시
    ShowWindow(hWnd, nCmdShow);

    // 메시지 루프
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return static_cast<int>(msg.wParam);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    PAINTSTRUCT ps;
    HDC hdc, memdc;

    switch (uMsg) {
    case WM_CREATE:
        hdc = GetDC(hWnd);
        ImgLoad();
        SetTimer(hWnd, 1, 100, (TIMERPROC)AniType);//캐릭터 타이머
        ReleaseDC(hWnd, hdc);
        break;
    case WM_PAINT:
        hdc = BeginPaint(hWnd, &ps);
        memdc = CreateCompatibleDC(hdc);
        //AllDraw(memdc);
       // BitBlt(hdc, 0, 0, WindowWidth, WindowHeight, memdc, 0, 0, SRCCOPY);
       // DeleteDC(memdc);
        EndPaint(hWnd, &ps);
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    case WM_KEYDOWN:
        switch (wParam) {
        case 'w':
            break;
        case 'a':
            break;
        case 's':
            break;
        case 'd':
            break;
        }
    default:
        return DefWindowProc(hWnd, uMsg, wParam, lParam);
    }
    return 0;
}

void CALLBACK AniType(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime)
{
    HDC hdc, memdc;
    static HBITMAP hBitmap;
    hdc = GetDC(hWnd);
    hBitmap = CreateCompatibleBitmap(hdc, WindowWidth, WindowHeight);
    memdc = CreateCompatibleDC(hdc);
    SelectObject(memdc, hBitmap);
    AllDraw(memdc);
    BitBlt(hdc, 0, 0, WindowWidth, WindowHeight, memdc, 0, 0, SRCCOPY);
    DeleteObject(hBitmap);
    DeleteDC(memdc);
    ReleaseDC(hWnd, hdc);
}

void ImgLoad()
{
    background.img[0].Load(TEXT("chess_board.png"));
   // Player[0].Standlmg[0].Load(TEXT("player.png"));
}

void AllDraw(HDC memdc)
{
    AnimationDraw(memdc);
}

void AnimationDraw(HDC hdc)
{
    float width = background.img[0].GetWidth();
    float height = background.img[0].GetHeight();
    background.img[0].Draw(hdc, 0, 0, WindowWidth, WindowHeight, 0, 0, width, height);
}
