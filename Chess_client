#include <windows.h> 
#include <tchar.h>
#include <atlimage.h>
#include <time.h>
#include <iostream>
#include <WS2tcpip.h>
#include <unordered_map>
#include "protocol.h"

#ifdef UNICODE
#pragma comment(linker, "/entry:wWinMainCRTStartup /subsystem:console")
#else
#pragma comment(linker, "/entry:WinMainCRTStartup /subsystem:console")
#endif

using namespace std;
#pragma comment (lib,"WS2_32.LIB")

cs_login CS_LOGIN;
cs_input CS_INPUT;
cs_logout CS_LOGOUT;
sc_accept SC_ACCEPy;
sc_moveto SC_MOVETO;
sc_logout SC_LOGOUT;


const short SERVER_PORT = 4000;
const int BUFSIZE = 256;

unordered_map<int, Player> players;

#define WindowWidth 773
#define WindowHeight 780

int x_pos = 0;
int y_pos = 0;
int num;
char direction_buf[1];

WSAOVERLAPPED s_over;
WSAOVERLAPPED r_over;
SOCKET s_socket;
WSABUF s_wsabuf[1];
WSABUF r_wsabuf[1];
char s_buf[BUFSIZE];
char r_buf[BUFSIZE];
int id;

bool isClick = false;



typedef struct BACKGROUND {
    CImage img[3];
} Background;

typedef struct CHARACTER {
    CImage Standlmg[10];
} Character;

enum direction {
    LEFT,
    RIGHT,
    UP,
    DOWN
};

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
void do_send_login();
void do_send_input();
void do_send_logout();
void do_recv();
void CALLBACK recv_callback(DWORD err, DWORD num_bytes, LPWSAOVERLAPPED recv_over, DWORD flags);




HINSTANCE g_hInst;
LPCTSTR lpszClass = L"Window Class Name";
LPCTSTR lpszWindowName = L"Server Project";

Background background;
Character Player[10];

void AllDraw(HDC memdc);
void AnimationDraw(HDC memdc);
void ImgLoad();

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);
void CALLBACK AniType(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    // 윈도우 클래스 등록
    const wchar_t CLASS_NAME[] = L"SampleWindowClass";
    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    // 윈도우 생성
    HWND hWnd = CreateWindowEx(
        0,                              // 추가 스타일
        CLASS_NAME,                     // 윈도우 클래스 이름
        L"GS1_2020182006_김경민",               // 윈도우 제목
        WS_OVERLAPPEDWINDOW,            // 윈도우 스타일
        CW_USEDEFAULT, CW_USEDEFAULT,   // 윈도우 위치 (기본값)
        WindowWidth, WindowHeight,   // 윈도우 크기 (기본값)
        NULL,                           // 부모 윈도우 없음
        NULL,                           // 메뉴 없음
        hInstance,                      // 인스턴스 핸들
        NULL                            // 추가 인수 없음
    );

    if (hWnd == NULL) {
        MessageBox(NULL, L"윈도우를 생성할 수 없습니다.", L"오류", MB_OK | MB_ICONERROR);
        return 0;
    }

    // 윈도우 표시
    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    char SERVER_ADDR[BUFSIZE];
    cout << "IP주소를 입력하세요: ";
    cin >> SERVER_ADDR;

    wcout.imbue(locale("korean"));
    WSADATA WSAData;
    WSAStartup(MAKEWORD(2, 2), &WSAData);
    SOCKET server_s = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, 0, 0, WSA_FLAG_OVERLAPPED);
    SOCKADDR_IN server_a;
    ZeroMemory(&server_a, sizeof(server_a));
    server_a.sin_family = AF_INET;
    server_a.sin_port = htons(SERVER_PORT);
    inet_pton(AF_INET, SERVER_ADDR, &server_a.sin_addr);
    connect(server_s, reinterpret_cast<sockaddr*>(&server_a), sizeof(server_a));
    do_send_login();
    do_recv();

    // 메시지 루프
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return static_cast<int>(msg.wParam);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{

    char direction_buf[1];

    PAINTSTRUCT ps;
    HDC hdc, memdc;

    switch (uMsg) {
    case WM_CREATE:
        hdc = GetDC(hWnd);
        ImgLoad();
        SetTimer(hWnd, 1, 1, (TIMERPROC)AniType);  //캐릭터 타이머
        ReleaseDC(hWnd, hdc);
        break;
    case WM_PAINT:
        hdc = BeginPaint(hWnd, &ps);
        memdc = CreateCompatibleDC(hdc);
        AllDraw(memdc);
        BitBlt(hdc, 0, 0, WindowWidth, WindowHeight, memdc, 0, 0, SRCCOPY);
        DeleteDC(memdc);
        EndPaint(hWnd, &ps);
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    case WM_KEYDOWN:
        switch (wParam) {


        case VK_LEFT:
            direction_buf[0] = direction::LEFT;
            break;
        case VK_RIGHT:
            direction_buf[0] = direction::RIGHT;
            break;
        case VK_UP:
            direction_buf[0] = direction::UP;
            break;
        case VK_DOWN:
            direction_buf[0] = direction::DOWN;
            break;

        default:
            break;
        }
        InvalidateRect(hWnd, NULL, TRUE);
    case WM_CLOSE:
        do_send_logout();
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, uMsg, wParam, lParam);
    }
    return 0;
}

void do_send_login() {
    CS_LOGIN.size = sizeof(cs_login);
    CS_LOGIN.type = CS_LOGIN_PACKET;

    s_wsabuf[0].buf = reinterpret_cast<char*>(&CS_LOGIN);
    s_wsabuf[0].len = CS_LOGIN.size;
    memset(&s_over, 0, sizeof(s_over));
    WSASend(s_socket, s_wsabuf, 1, 0, 0, &s_over, NULL);
}

void do_send_input() {
    CS_INPUT.size = sizeof(cs_input);
    CS_INPUT.type = CS_INPUT_PACKET;
    CS_INPUT.direction = static_cast<int>(direction_buf[0]);

    s_wsabuf[0].buf = reinterpret_cast<char*>(&CS_INPUT);
    s_wsabuf[0].len = CS_INPUT.size;
    memset(&s_over, 0, sizeof(s_over));
    cout << "type of packet : " << CS_INPUT.type << "where" << CS_INPUT.direction << '\n';
    WSASend(s_socket, s_wsabuf, 1, 0, 0, &s_over, NULL);
}

void do_send_logout() {
    CS_LOGOUT.size = sizeof(cs_logout);
    CS_LOGOUT.type = CS_LOGOUT_PACKET;
    
    s_wsabuf[0].buf = reinterpret_cast<char*>(&CS_LOGOUT);
    s_wsabuf[0].len = CS_LOGOUT.size;
    memset(&r_over, 0, sizeof(s_over));
    WSASend(s_socket, r_wsabuf, 1, 0, 0, &s_over, NULL);
}

void do_recv() {
    r_wsabuf[0].buf = r_buf;
    r_wsabuf[0].len = BUFSIZE;
    DWORD recv_flag = 0;
    memset(&r_over, 0, sizeof(r_over));
    WSARecv(s_socket, r_wsabuf, 1, 0, &recv_flag, &r_over, recv_callback);
}

void CALLBACK recv_callback(DWORD err, DWORD num_bytes, LPWSAOVERLAPPED recv_over, DWORD flags) {
    char* p = r_buf;
    cout << (int)p[0] << " " << (int)p[1] << '\n';
    while (p < r_buf + num_bytes) {
        char packet_size = p[0];
        char packet_type = p[1];
        //서버에서 어떤 데이터가 넘어오는지 확인
        switch (packet_type) {
        case SC_ACCEPT_PACKET:
            id = reinterpret_cast<sc_accept*>(p)->client_id;
            players[id].x_pos = reinterpret_cast<sc_accept*>(p)->x_pos;
            players[id].y_pos = reinterpret_cast<sc_accept*>(p)->y_pos;
            players[id].x_pos += 93;
            players[id].y_pos += 93;
            num = reinterpret_cast<sc_accept*>(p)->client_num;
            for (int i = 1; i <= num; ++i) {
                players[i].isExist = true;
            }
            break;
        case SC_MOVETO_PACKET:
            id = reinterpret_cast<sc_moveto*>(p)->client_id;
            players[id].x_pos = reinterpret_cast<sc_moveto*>(p)->x_pos;
            players[id].y_pos = reinterpret_cast<sc_moveto*>(p)->y_pos;
            players[id].x_pos *= 25;
            players[id].y_pos *= 25;
            num = reinterpret_cast<sc_accept*>(p)->client_num;
            break;
        case SC_LOGOUT_PACKET:
            players.erase(reinterpret_cast<sc_logout*>(p)->client_id);
            break;
        }
        p += packet_size;
    }
    do_recv();
}





void CALLBACK AniType(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime)
{
    HDC hdc, memdc;
    static HBITMAP hBitmap;
    hdc = GetDC(hWnd);
    hBitmap = CreateCompatibleBitmap(hdc, WindowWidth, WindowHeight);
    memdc = CreateCompatibleDC(hdc);
    SelectObject(memdc, hBitmap);
    AllDraw(memdc);
    BitBlt(hdc, 0, 0, WindowWidth, WindowHeight, memdc, 0, 0, SRCCOPY);
    DeleteObject(hBitmap);
    DeleteDC(memdc);
    ReleaseDC(hWnd, hdc);
}

void ImgLoad()
{
    background.img[0].Load(TEXT("chess_board.png"));
    Player[0].Standlmg[0].Load(TEXT("player.png"));
}

void AllDraw(HDC memdc)
{
    AnimationDraw(memdc);
}

void AnimationDraw(HDC hdc)
{

    float width = background.img[0].GetWidth() - 20;
    float height = background.img[0].GetHeight() - 20;
    float p_width = Player[0].Standlmg[0].GetWidth();
    float p_height = Player[0].Standlmg[0].GetHeight();


    background.img[0].Draw(hdc, 0, 0, WindowWidth, WindowHeight, 20, 20, width, height);

    Player[0].Standlmg[0].Draw(hdc, x_pos, y_pos, 100, 100, 0, 0, p_width, p_height);
}

